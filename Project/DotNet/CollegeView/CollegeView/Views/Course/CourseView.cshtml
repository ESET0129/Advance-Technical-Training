@{
    ViewData["Title"] = "Courses";
}

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

<div class="container my-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary"><i class="bi bi-book"></i> Course List</h2>
        <button id="addCourseBtn" class="btn btn-success" style="display: none;">
            <i class="bi bi-plus-circle"></i> Add Course
        </button>
    </div>

    <div class="card shadow-lg p-4">
        <div class="d-flex justify-content-between mb-3">
            <button id="loadBtn" class="btn btn-primary">
                <i class="bi bi-arrow-clockwise"></i> Load Courses
            </button>

            <!-- ✅ Dropdown for course names -->
            <div class="d-flex align-items-center">
                <label class="me-2 fw-semibold text-secondary">Filter by Name:</label>
                <select id="courseDropdown" class="form-select" style="width: 200px;">
                    <option value="">-- Select Course --</option>
                </select>
            </div>
        </div>

        <div id="courses" class="table-responsive"></div>
    </div>
</div>

<!-- Modal for Add/Edit -->
<div class="modal fade" id="courseModal" tabindex="-1" aria-labelledby="courseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="courseModalLabel">Add / Edit Course</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="courseForm">
                    <input type="hidden" id="courseId" />
                    <div class="mb-3">
                        <label for="courseCode" class="form-label fw-semibold">Course Code</label>
                        <input type="text" id="courseCode" class="form-control" placeholder="Enter course code" required />
                    </div>
                    <div class="mb-3">
                        <label for="courseName" class="form-label fw-semibold">Course Name</label>
                        <input type="text" id="courseName" class="form-control" placeholder="Enter course name" required />
                    </div>
                    <div class="mb-3">
                        <label for="department" class="form-label fw-semibold">Department</label>
                        <input type="text" id="department" class="form-control" placeholder="Enter department" />
                    </div>
                    <div class="mb-3">
                        <label for="semester" class="form-label fw-semibold">Semester</label>
                        <input type="number" id="semester" class="form-control" placeholder="Enter semester" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- jQuery + Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let coursesData = [];
    let currentPage = 1;
    const pageSize = 5; // ✅ Number of courses per page
    let userRole = ''; // Store user role

    // ✅ Get user role from token
    function getUserRole() {
        const token = localStorage.getItem("jwtToken");
        if (token) {
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                return payload.role || 'User'; // Default to 'User' if role not found
            } catch (e) {
                console.error('Error parsing token:', e);
                return 'User';
            }
        }
        return 'User';
    }

    // ✅ Check if user is admin
    function isAdmin() {
        return userRole === 'Admin';
    }

    // ✅ Update UI based on user role
    function updateUIForRole() {
        userRole = getUserRole();

        if (isAdmin()) {
            // Show Add Course button for Admin
            $("#addCourseBtn").show();
        } else {
            // Hide Add Course button for non-Admin users
            $("#addCourseBtn").hide();
        }
    }

    // ✅ Load all courses
    $("#loadBtn").click(loadAllCourses);

    function loadAllCourses() {
        const token = localStorage.getItem("jwtToken");

        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        $.ajax({
            url: "https://localhost:7142/api/CollegeApp/Courses/All",
            type: "GET",
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {
                coursesData = data;
                populateDropdown(data);
                currentPage = 1;
                renderCourseTable();
            },
            error: function (xhr) {
                if (xhr.status === 401) {
                    $("#courses").html("<p class='text-danger'>Unauthorized. Please login again.</p>");
                } else {
                    $("#courses").html("<p class='text-danger'>Error fetching data.</p>");
                }
            }
        });
    }

    // ✅ Populate dropdown with course names
    function populateDropdown(data) {
        let options = "<option value=''>-- Select Course --</option>";
        // Remove duplicates and sort names alphabetically
        const uniqueNames = [...new Set(data.map(c => c.courseName))].sort();
        uniqueNames.forEach(name => {
            options += `<option value='${name}'>${name}</option>`;
        });
        $("#courseDropdown").html(options);
    }

    // ✅ Filter by course name
    $("#courseDropdown").change(function () {
        const name = $(this).val();
        if (!name) {
            // If no name selected, load all courses
            loadAllCourses();
            return;
        }

        const token = localStorage.getItem("jwtToken");
        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        // Show loading state
        $("#courses").html("<p class='text-muted text-center'>Loading...</p>");

        $.ajax({
            url: `https://localhost:7142/api/CollegeApp/Courses/Name/${encodeURIComponent(name)}`,
            type: "GET",
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {
                console.log("Filter API Response:", data); // Debug log

                // Handle both array and single object responses
                if (data) {
                    coursesData = Array.isArray(data) ? data : [data];
                    currentPage = 1;
                    renderCourseTable();
                } else {
                    coursesData = [];
                    $("#courses").html("<p class='text-danger text-center'>No course found with that name.</p>");
                }
            },
            error: function (xhr) {
                console.error("Filter API Error:", xhr); // Debug log
                if (xhr.status === 404) {
                    coursesData = [];
                    $("#courses").html("<p class='text-danger text-center'>No course found with that name.</p>");
                } else {
                    $("#courses").html("<p class='text-danger text-center'>Error fetching course data.</p>");
                }
            }
        });
    });

    // ✅ Render Table with Pagination
    function renderCourseTable() {
        console.log("Rendering table with data:", coursesData); // Debug log

        if (!coursesData || coursesData.length === 0) {
            $("#courses").html("<p class='text-muted text-center'>No courses found.</p>");
            return;
        }

        const totalPages = Math.ceil(coursesData.length / pageSize);
        const start = (currentPage - 1) * pageSize;
        const end = start + pageSize;
        const paginatedData = coursesData.slice(start, end);

        // Determine if we should show Actions column
        const showActionsColumn = isAdmin();

        let html = `
            <table class='table table-hover align-middle text-center'>
                <thead class='table-dark'>
                    <tr>
                        <th>ID</th>
                        <th>Course Code</th>
                        <th>Course Name</th>
                        <th>Department</th>
                        <th>Semester</th>
                        ${showActionsColumn ? '<th>Actions</th>' : ''}
                    </tr>
                </thead>
                <tbody>
        `;

        paginatedData.forEach(course => {
            html += `
                <tr>
                    <td>${course.courseId}</td>
                    <td>${course.courseCode}</td>
                    <td>${course.courseName}</td>
                    <td>${course.department || 'N/A'}</td>
                    <td>${course.semester || 'N/A'}</td>
            `;

            // Only add Actions column if user is Admin
            if (showActionsColumn) {
                html += `
                    <td>
                        <button class='btn btn-warning btn-sm me-2 editBtn' data-id='${course.courseId}'>
                            <i class='bi bi-pencil-square'></i> Edit
                        </button>
                        <button class='btn btn-danger btn-sm deleteBtn' data-id='${course.courseId}'>
                            <i class='bi bi-trash'></i> Delete
                        </button>
                    </td>
                `;
            }

            html += `</tr>`;
        });

        html += `
                    </tbody>
                </table>

                <!-- ✅ Pagination Controls -->
                <div class='d-flex justify-content-between align-items-center mt-3'>
                    <button class='btn btn-outline-primary btn-sm' id='prevPage' ${currentPage === 1 ? "disabled" : ""}>
                        <i class='bi bi-arrow-left'></i> Previous
                    </button>
                    <span class='fw-semibold text-secondary'>
                        Page ${currentPage} of ${totalPages} (Total: ${coursesData.length} courses)
                        <br><small class='text-info'>Role: ${userRole}</small>
                    </span>
                    <button class='btn btn-outline-primary btn-sm' id='nextPage' ${currentPage === totalPages ? "disabled" : ""}>
                        Next <i class='bi bi-arrow-right'></i>
                    </button>
                </div>
            `;

        $("#courses").html(html);

        $("#prevPage").off('click').click(() => {
            if (currentPage > 1) {
                currentPage--;
                renderCourseTable();
            }
        });

        $("#nextPage").off('click').click(() => {
            if (currentPage < totalPages) {
                currentPage++;
                renderCourseTable();
            }
        });
    }

    // Open Modal for Add (only for Admin)
    $("#addCourseBtn").click(function () {
        if (!isAdmin()) {
            alert("You don't have permission to add courses.");
            return;
        }

        $("#courseForm")[0].reset();
        $("#courseId").val('');
        $("#courseModalLabel").text("Add Course");
        $("#courseModal").modal("show");
    });

    // Open Modal for Edit (only for Admin)
    $(document).on("click", ".editBtn", function () {
        if (!isAdmin()) {
            alert("You don't have permission to edit courses.");
            return;
        }

        const id = $(this).data("id");
        const course = coursesData.find(course => course.courseId === id);
        if (course) {
            $("#courseId").val(course.courseId);
            $("#courseCode").val(course.courseCode);
            $("#courseName").val(course.courseName);
            $("#department").val(course.department || '');
            $("#semester").val(course.semester || '');
            $("#courseModalLabel").text("Edit Course");
            $("#courseModal").modal("show");
        }
    });

    // Delete Course (only for Admin)
    $(document).on("click", ".deleteBtn", function () {
        if (!isAdmin()) {
            alert("You don't have permission to delete courses.");
            return;
        }

        const id = $(this).data("id");
        const course = coursesData.find(course => course.courseId === id);

        if (course && confirm(`Are you sure you want to delete ${course.courseName}?`)) {
            const token = localStorage.getItem("jwtToken");

            if (!token) {
                alert("Please login first!");
                window.location.href = "/Auth/Login";
                return;
            }

            $.ajax({
                url: `https://localhost:7142/api/CollegeApp/Courses/Delete/${id}`,
                type: "DELETE",
                headers: { "Authorization": "Bearer " + token },
                success: function () {
                    loadAllCourses(); // Reload table with pagination
                    alert("Course deleted successfully!");
                },
                error: function (xhr) {
                    if (xhr.status === 403) {
                        alert("Access denied. You don't have permission to delete courses.");
                    } else {
                        alert("Error deleting course.");
                    }
                    console.error("Delete error:", xhr);
                }
            });
        }
    });

    // Submit Form (Add or Edit) - Backend will also validate role
    $("#courseForm").submit(function (e) {
        e.preventDefault();

        if (!isAdmin()) {
            alert("You don't have permission to modify courses.");
            return;
        }

        const token = localStorage.getItem("jwtToken");
        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        const course = {
            courseId: $("#courseId").val() || 0,
            courseCode: $("#courseCode").val(),
            courseName: $("#courseName").val(),
            department: $("#department").val() || null,
            semester: $("#semester").val() ? parseInt($("#semester").val()) : null
        };

        const isEdit = course.courseId > 0;

        const apiUrl = isEdit
            ? `https://localhost:7142/api/CollegeApp/Courses/Update/${course.courseId}`
            : "https://localhost:7142/api/CollegeApp/Courses/Create";

        $.ajax({
            url: apiUrl,
            type: isEdit ? "PUT" : "POST",
            headers: {
                "Authorization": "Bearer " + token,
                "Content-Type": "application/json"
            },
            data: JSON.stringify(course),
            success: function () {
                $("#courseModal").modal("hide");
                loadAllCourses(); // Reload table with pagination
                alert(`Course ${isEdit ? 'updated' : 'added'} successfully!`);
            },
            error: function (xhr) {
                if (xhr.status === 403) {
                    alert("Access denied. You don't have permission to modify courses.");
                } else {
                    alert("Error saving course.");
                }
                console.error("Save error:", xhr);
            }
        });
    });

    // Auto-load courses when page loads if user is authenticated
    $(document).ready(function () {
        const token = localStorage.getItem("jwtToken");
        if (token) {
            updateUIForRole(); // Set UI based on role first
            loadAllCourses();
        } else {
            window.location.href = "/Auth/Login";
        }
    });
</script>




@* 
@{
    ViewData["Title"] = "Courses";
}

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

<div class="container my-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary"><i class="bi bi-book"></i> Course List</h2>
        <button id="addCourseBtn" class="btn btn-success" style="display: none;">
            <i class="bi bi-plus-circle"></i> Add Course
        </button>
    </div>

    <div class="card shadow-lg p-4">
        <div class="d-flex justify-content-between mb-3">
            <button id="loadBtn" class="btn btn-primary">
                <i class="bi bi-arrow-clockwise"></i> Load Courses
            </button>

            <!-- ✅ Dropdown for course names -->
            <div class="d-flex align-items-center">
                <label class="me-2 fw-semibold text-secondary">Filter by Name:</label>
                <select id="courseDropdown" class="form-select" style="width: 200px;">
                    <option value="">-- Select Course --</option>
                </select>
            </div>
        </div>

        <div id="courses" class="table-responsive"></div>
    </div>
</div>

<!-- Modal for Add/Edit -->
<div class="modal fade" id="courseModal" tabindex="-1" aria-labelledby="courseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="courseModalLabel">Add / Edit Course</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="courseForm">
                    <input type="hidden" id="courseId" />
                    <div class="mb-3">
                        <label for="courseCode" class="form-label fw-semibold">Course Code</label>
                        <input type="text" id="courseCode" class="form-control" placeholder="Enter course code" required />
                    </div>
                    <div class="mb-3">
                        <label for="courseName" class="form-label fw-semibold">Course Name</label>
                        <input type="text" id="courseName" class="form-control" placeholder="Enter course name" required />
                    </div>
                    <div class="mb-3">
                        <label for="department" class="form-label fw-semibold">Department</label>
                        <input type="text" id="department" class="form-control" placeholder="Enter department" />
                    </div>
                    <div class="mb-3">
                        <label for="semester" class="form-label fw-semibold">Semester</label>
                        <input type="number" id="semester" class="form-control" placeholder="Enter semester" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- jQuery + Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let coursesData = [];
    let currentPage = 1;
    const pageSize = 5; // ✅ Number of courses per page
    let userRole = ''; // Store user role

    // ✅ Get user role from token
    function getUserRole() {
        const token = sessionStorage.getItem("jwtToken"); // Changed to sessionStorage
        if (token) {
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                return payload.role || 'User'; // Default to 'User' if role not found
            } catch (e) {
                console.error('Error parsing token:', e);
                return 'User';
            }
        }
        return 'User';
    }

    // ✅ Check if user is admin
    function isAdmin() {
        return userRole === 'Admin';
    }

    // ✅ Update UI based on user role
    function updateUIForRole() {
        userRole = getUserRole();

        if (isAdmin()) {
            // Show Add Course button for Admin
            $("#addCourseBtn").show();
        } else {
            // Hide Add Course button for non-Admin users
            $("#addCourseBtn").hide();
        }
    }

    // ✅ Load all courses
    $("#loadBtn").click(loadAllCourses);

    function loadAllCourses() {
        const token = sessionStorage.getItem("jwtToken"); // Changed to sessionStorage

        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        $.ajax({
            url: "https://localhost:7142/api/CollegeApp/Courses/All",
            type: "GET",
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {
                coursesData = data;
                populateDropdown(data);
                currentPage = 1;
                renderCourseTable();
            },
            error: function (xhr) {
                if (xhr.status === 401) {
                    $("#courses").html("<p class='text-danger'>Unauthorized. Please login again.</p>");
                } else {
                    $("#courses").html("<p class='text-danger'>Error fetching data.</p>");
                }
            }
        });
    }

    // ✅ Populate dropdown with course names
    function populateDropdown(data) {
        let options = "<option value=''>-- Select Course --</option>";
        // Remove duplicates and sort names alphabetically
        const uniqueNames = [...new Set(data.map(c => c.courseName))].sort();
        uniqueNames.forEach(name => {
            options += `<option value='${name}'>${name}</option>`;
        });
        $("#courseDropdown").html(options);
    }

    // ✅ Filter by course name
    $("#courseDropdown").change(function () {
        const name = $(this).val();
        if (!name) {
            // If no name selected, load all courses
            loadAllCourses();
            return;
        }

        const token = sessionStorage.getItem("jwtToken"); // Changed to sessionStorage
        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        // Show loading state
        $("#courses").html("<p class='text-muted text-center'>Loading...</p>");

        $.ajax({
            url: `https://localhost:7142/api/CollegeApp/Courses/Name/${encodeURIComponent(name)}`,
            type: "GET",
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {
                console.log("Filter API Response:", data); // Debug log

                // Handle both array and single object responses
                if (data) {
                    coursesData = Array.isArray(data) ? data : [data];
                    currentPage = 1;
                    renderCourseTable();
                } else {
                    coursesData = [];
                    $("#courses").html("<p class='text-danger text-center'>No course found with that name.</p>");
                }
            },
            error: function (xhr) {
                console.error("Filter API Error:", xhr); // Debug log
                if (xhr.status === 404) {
                    coursesData = [];
                    $("#courses").html("<p class='text-danger text-center'>No course found with that name.</p>");
                } else {
                    $("#courses").html("<p class='text-danger text-center'>Error fetching course data.</p>");
                }
            }
        });
    });

    // ✅ Render Table with Pagination
    function renderCourseTable() {
        console.log("Rendering table with data:", coursesData); // Debug log

        if (!coursesData || coursesData.length === 0) {
            $("#courses").html("<p class='text-muted text-center'>No courses found.</p>");
            return;
        }

        const totalPages = Math.ceil(coursesData.length / pageSize);
        const start = (currentPage - 1) * pageSize;
        const end = start + pageSize;
        const paginatedData = coursesData.slice(start, end);

        // Determine if we should show Actions column
        const showActionsColumn = isAdmin();

        let html = `
            <table class='table table-hover align-middle text-center'>
                <thead class='table-dark'>
                    <tr>
                        <th>ID</th>
                        <th>Course Code</th>
                        <th>Course Name</th>
                        <th>Department</th>
                        <th>Semester</th>
                        ${showActionsColumn ? '<th>Actions</th>' : ''}
                    </tr>
                </thead>
                <tbody>
        `;

        paginatedData.forEach(course => {
            html += `
                <tr>
                    <td>${course.courseId}</td>
                    <td>${course.courseCode}</td>
                    <td>${course.courseName}</td>
                    <td>${course.department || 'N/A'}</td>
                    <td>${course.semester || 'N/A'}</td>
            `;

            // Only add Actions column if user is Admin
            if (showActionsColumn) {
                html += `
                    <td>
                        <button class='btn btn-warning btn-sm me-2 editBtn' data-id='${course.courseId}'>
                            <i class='bi bi-pencil-square'></i> Edit
                        </button>
                        <button class='btn btn-danger btn-sm deleteBtn' data-id='${course.courseId}'>
                            <i class='bi bi-trash'></i> Delete
                        </button>
                    </td>
                `;
            }

            html += `</tr>`;
        });

        html += `
                    </tbody>
                </table>

                <!-- ✅ Pagination Controls -->
                <div class='d-flex justify-content-between align-items-center mt-3'>
                    <button class='btn btn-outline-primary btn-sm' id='prevPage' ${currentPage === 1 ? "disabled" : ""}>
                        <i class='bi bi-arrow-left'></i> Previous
                    </button>
                    <span class='fw-semibold text-secondary'>
                        Page ${currentPage} of ${totalPages} (Total: ${coursesData.length} courses)
                        <br><small class='text-info'>Role: ${userRole}</small>
                    </span>
                    <button class='btn btn-outline-primary btn-sm' id='nextPage' ${currentPage === totalPages ? "disabled" : ""}>
                        Next <i class='bi bi-arrow-right'></i>
                    </button>
                </div>
            `;

        $("#courses").html(html);

        $("#prevPage").off('click').click(() => {
            if (currentPage > 1) {
                currentPage--;
                renderCourseTable();
            }
        });

        $("#nextPage").off('click').click(() => {
            if (currentPage < totalPages) {
                currentPage++;
                renderCourseTable();
            }
        });
    }

    // Open Modal for Add (only for Admin)
    $("#addCourseBtn").click(function () {
        if (!isAdmin()) {
            alert("You don't have permission to add courses.");
            return;
        }

        $("#courseForm")[0].reset();
        $("#courseId").val('');
        $("#courseModalLabel").text("Add Course");
        $("#courseModal").modal("show");
    });

    // Open Modal for Edit (only for Admin)
    $(document).on("click", ".editBtn", function () {
        if (!isAdmin()) {
            alert("You don't have permission to edit courses.");
            return;
        }

        const id = $(this).data("id");
        const course = coursesData.find(course => course.courseId === id);
        if (course) {
            $("#courseId").val(course.courseId);
            $("#courseCode").val(course.courseCode);
            $("#courseName").val(course.courseName);
            $("#department").val(course.department || '');
            $("#semester").val(course.semester || '');
            $("#courseModalLabel").text("Edit Course");
            $("#courseModal").modal("show");
        }
    });

    // Delete Course (only for Admin)
    $(document).on("click", ".deleteBtn", function () {
        if (!isAdmin()) {
            alert("You don't have permission to delete courses.");
            return;
        }

        const id = $(this).data("id");
        const course = coursesData.find(course => course.courseId === id);

        if (course && confirm(`Are you sure you want to delete ${course.courseName}?`)) {
            const token = sessionStorage.getItem("jwtToken"); // Changed to sessionStorage

            if (!token) {
                alert("Please login first!");
                window.location.href = "/Auth/Login";
                return;
            }

            $.ajax({
                url: `https://localhost:7142/api/CollegeApp/Courses/Delete/${id}`,
                type: "DELETE",
                headers: { "Authorization": "Bearer " + token },
                success: function () {
                    loadAllCourses(); // Reload table with pagination
                    alert("Course deleted successfully!");
                },
                error: function (xhr) {
                    if (xhr.status === 403) {
                        alert("Access denied. You don't have permission to delete courses.");
                    } else {
                        alert("Error deleting course.");
                    }
                    console.error("Delete error:", xhr);
                }
            });
        }
    });

    // Submit Form (Add or Edit) - Backend will also validate role
    $("#courseForm").submit(function (e) {
        e.preventDefault();

        if (!isAdmin()) {
            alert("You don't have permission to modify courses.");
            return;
        }

        const token = sessionStorage.getItem("jwtToken"); // Changed to sessionStorage
        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        const course = {
            courseId: $("#courseId").val() || 0,
            courseCode: $("#courseCode").val(),
            courseName: $("#courseName").val(),
            department: $("#department").val() || null,
            semester: $("#semester").val() ? parseInt($("#semester").val()) : null
        };

        const isEdit = course.courseId > 0;

        const apiUrl = isEdit
            ? `https://localhost:7142/api/CollegeApp/Courses/Update/${course.courseId}`
            : "https://localhost:7142/api/CollegeApp/Courses/Create";

        $.ajax({
            url: apiUrl,
            type: isEdit ? "PUT" : "POST",
            headers: {
                "Authorization": "Bearer " + token,
                "Content-Type": "application/json"
            },
            data: JSON.stringify(course),
            success: function () {
                $("#courseModal").modal("hide");
                loadAllCourses(); // Reload table with pagination
                alert(`Course ${isEdit ? 'updated' : 'added'} successfully!`);
            },
            error: function (xhr) {
                if (xhr.status === 403) {
                    alert("Access denied. You don't have permission to modify courses.");
                } else {
                    alert("Error saving course.");
                }
                console.error("Save error:", xhr);
            }
        });
    });

    // Auto-load courses when page loads if user is authenticated
    $(document).ready(function () {
        const token = sessionStorage.getItem("jwtToken"); // Changed to sessionStorage
        if (token) {
            updateUIForRole(); // Set UI based on role first
            loadAllCourses();
        } else {
            window.location.href = "/Auth/Login";
        }
    });
</script> *@